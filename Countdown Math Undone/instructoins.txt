Overview
For this project, we will be modifying the Countdown Math program from Project 2 to add the ability to undo moves and also to solve puzzles automatically.

The code I've given you to start with is a modified solution to Project 2. It uses an array to simplify the program, and also has the following changes from Project 2:

The user now chooses Q to quit. We'll be adding two more letter choices, U and S, so this gives you an example of how to handle text input. The prompt for user input has been modified slightly to match the new inputs.
When one game ends, the user may choose to play again.
Those changes have already been made for you in the template code for this project. In theory, you may instead use your own solution to Project 2, but you'd need to modify it to match those two differences.

For this project, you must use a linked list that you create to remember the moves that have been made (not the linked list from a C++ library or other source). However, when creating your own linked list, you may use any code that we have written in class or that is in the textbook to copy/paste from, or to use as a reference.

Implementing Undo
When the user chooses U, you should undo the last move, going back to the numbers from before that move. If the game is at the start (no move has been made), display the message "Cannot undo."

Undo is typically implemented using a linked list, and that is a requirement for this project. When we undo, we want the most recent board, and then if we undo again, we want the board right before that. That can be implemented by adding boards to the beginning of the list, and removing from the beginning of the list as well. This is also called a stack (where the most recently added item is the item that's removed).

There are two equally good ways to implement an undo stack. One is to remember the state of the game at each node in the list: the numbers available, and any additional information needed for the game to work. When a new (valid) move is made, copy the new game state (numbers, etc) onto the stack (or just place a Game object there). When you undo, you can remove the top game state from the stack (the one that matches our current state), and then use the game state that is now at the top of the stack (setting our game to match that game).

The second way to implement an undo stack is to remember the move itself on the stack in a way that can be undone. So that might be remembering what two numbers were removed from the game (and at which index they were), and which index the answer was put into. For example, a move might take the 10 from index 4, the 5 from index 3, and put the result (let's say adding them for 15) into index 1. If I remembered that information, I could undo the move by putting a 0 into index 1 (removing the 15 answer) and then adding the two initial numbers back in: putting 10 into index 4, and 5 into index 3. After doing that, the array should exactly match the array that we started with.

I used the first approach and think it is a little easier since we already have a Game class, but the second approach would work as well, so you can use the one that makes the most sense to you, or seems easiest to add to your project.

Implementing Solve
When the user chooses S, the program should solve the puzzle, showing a series of calculation that result in the target. If a solution cannot be found, it should instead display "Unable to find a solution."

This will work similarly to our recursive Maze searching algorithm (and I strongly encourage you to use that code as an example). First, we can try two of the available numbers, do an operation with those, and then call the solve function to see if we can find a solution with those numbers. If that function is able to find a solution, then the calculation we did was a part of that. If it wasn't able to find a solution, then we should try another calculation and go again. If we try all the possible calculations and never find the solution, then we were not able to find a solution.

For example, let's say our goal is 400 and we have the numbers:

0 0 8 5 10 0


Skipping the 0s at the beginning, the first two numbers are 8 and 5, so we try adding 8+5. That will result in the numbers:

13 0 0 0 10 0
(since we remove the 8, remove the 5, then add the 13 in the first available spot).

We then want to call the solve function to see if it can find a solution with those numbers. It won't be able to, so we should then try the same numbers but a different operation: 8-5, giving these numbers:

3 0 0 0 10 0


Calling solve with those numbers also won't result in a solution, so we should try the next operation: 8 * 5, giving these numbers:

40 0 0 0 10 0


That will result in our finding the goal, so we'll include our calculation 8 * 5 = 40 in the solution that is shown to the user.

In order to match the results the autograder expects, you'll need to follow the same ordering:

Loop through each number in the array (so in our original example 0, then 0, then 8, then 5, and so on). For each of those numbers:
Loop through each number in the array again, following the same pattern. Now that we have two numbers:
If one of the numbers is 0, we don't do anything (that's a blank, so it can't be used in a calculation).
If the two indices are the same, we don't do anything (we can't add the first number to the first number since that would be using it twice). Note that if the 2nd number is a 6 and the 4th number is a 6, we can still use the second number and the fourth number (6+6, for example). So we only skip this step if the two indices are the same.
Try each of the four operations in this order: +, -, *, /. So, with 8 and 5, we'd try 8+5, then 8-5, then 8*5, then 8/5. With each of those, we'll remove 8 and 5 and add the result, and see if we can find a solution with the remaining numbers. I think it's helpful to make a copy of the current Game object, do the operation on that Game object, and then call solve with that Game object.
If we find a solution, we should output information about the first solution that we find (we don't need to keep looking for other solutions), showing a list of calculations that were used to find the solution.

Note that even if we try 8 and 5 and don't find an answer, we should also try 5 and 8 since the order is important for subtraction and division. You don't need to do anything special to do that, if you have nested loops and have indices i=0 and j=1, for example, when the indices are i=1 and j=0, you'll have the same numbers, just in the opposite order.

Another note is that this will follow computer integer math rules, so when we do 8/5, that'll give an answer of 1 even though the "real" Countdown Math game wouldn't allow us to do division that would have a remainder. That should make this easier for you--I don't want to make you do the work of determining if a calculation should be permitted--so we'll allow all of those calculations.

Sample Program Run
Enter random seed: 5

Let's play Countdown!
How many big numbers would you like (0-4)? 2

Your numbers are: 100 75 8 6 7 1
The target is: 351
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): s
Solution:
100 + 75 = 175
175 / 7 = 25
8 + 6 = 14
25 * 14 = 350
350 + 1 = 351

Your numbers are: 100 75 8 6 7 1
The target is: 351
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 100-75
100 - 75 = 25

Your numbers are: 25 8 6 7 1
The target is: 351
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 8+6
8 + 6 = 14

Your numbers are: 25 14 7 1
The target is: 351
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 25*14
25 * 14 = 350

Your numbers are: 350 7 1
The target is: 351
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 350+1
350 + 1 = 351

You win!

Would you like to play again (y/n)? y

Let's play Countdown!
How many big numbers would you like (0-4)? 1
Your numbers are: 50 9 5 10 1 2
The target is: 505
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 50*9
50 * 9 = 450

Your numbers are: 450 5 10 1 2
The target is: 505
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 5*10
5 * 10 = 50

Your numbers are: 450 50 1 2
The target is: 505
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): u


Your numbers are: 450 5 10 1 2
The target is: 505
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): U

Your numbers are: 50 9 5 10 1 2
The target is: 505
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 50*10
50 * 10 = 500

Your numbers are: 500 9 5 1 2
The target is: 505
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 500+5
500 + 5 = 505

You win!

Would you like to play again (y/n)? n


Enter random seed: 31

Let's play Countdown!
How many big numbers would you like (0-4)? 1
Your numbers are: 75 6 1 3 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 75*6
75 * 6 = 450

Your numbers are: 450 1 3 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 1+3
1 + 3 = 4

Your numbers are: 450 4 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 5+2
5 + 2 = 7

Your numbers are: 450 4 7
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): S
Unable to find a solution.

Your numbers are: 450 4 7
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): u

Your numbers are: 450 4 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): u

Your numbers are: 450 1 3 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): s
Solution:
450 + 1 = 451
451 / 3 = 150
150 + 2 = 152
152 * 5 = 760

Your numbers are: 450 1 3 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): u

Your numbers are: 75 6 1 3 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): u
Cannot undo.

Your numbers are: 75 6 1 3 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): u
Cannot undo.

Your numbers are: 75 6 1 3 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): s
Solution:
75 - 6 = 69
3 * 2 = 6
6 + 5 = 11
69 * 11 = 759
759 + 1 = 760

Your numbers are: 75 6 1 3 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): 75+1
75 + 1 = 76

Your numbers are: 76 6 3 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): s
Solution:
76 * 6 = 456
456 / 3 = 152
152 * 5 = 760

Your numbers are: 76 6 3 5 2
The target is: 760
Enter a calculation (or U to Undo, S to Solve, or Q to Quit): q
Exiting this game.

Would you like to play again (y/n)? n