For project 1, you'll be creating a Sears (Willis) Tower using ASCII (text) art. Your program will also display original art of your own creation.

Remember that, as noted in the syllabus, you must do your programming in the IDE for this project in zyBooks. You can use either the Coding Rooms 2 IDE in ZyBooks or the VS Code IDE in zyBooks; doing your programming in the textbook allows us to replay your progress and verify that you did the programming yourself.

Main Menu
The main menu gives the user a choice of displaying your own art, or the Sears Tower.

Program 1: Sears Tower
Which option would you like?
  1. Display original graphic
  2. Display Sears Tower
Your choice:  


If the user enters 1 to choose your art, your program should display your own original ASCII art (requirements are listed below in the Original Art section).

If the user enters 2 to choose the Sears Tower, your program should ask what the size of the tower should be, and then create it in that size.

Sears Tower
The appearance of the tower will be determined by the size the user enters. You may assume the user enters a number 2 or above (the program doesn't need to work if the user enters 1 or less, or something that isn't a number). 

For example, a size 2 Sears Tower is shown below (the bold portions are the user input). Note that:

There are three vertical sections (top, middle, and bottom), and three horizontal section (left, center, and right). The center is always tallest, then the left, and then the right.
The top of the building has the center section only, while the middle of the building has the left and center sections. Each of those sections is 2 characters taller than the next section (since the size is 2).
The bottom section is 4 characters tall (twice the given size).
The horizontal sections are each 2 characters wide (since the size is 2). These roof of each section is made using an underscore: _. Between each horizontal section are pipes: | (typically below the backspace/delete key).
The first line under the roof of each section includes the hash/pound sign across where the spaces would be: # These represent the utility floors, and go across the whole building, not just the section with the roof (though the pipes are still included on those floors).
At the bottom, the ground goes across the whole length of the building, marked with equal signs: =
Program 1: Sears Tower
Which option would you like?
  1. Display original graphic
  2. Display Sears Tower
Your choice: 2
What size should the Sears Tower be? 2
    __
   |##|
 __|  |
|##|##|
|  |  |__
|##|##|##|
|  |  |  |
|  |  |  |
|  |  |  |
==========


Here's an example of what the tower should look like at size 4:

      ____
     |####|
     |    |
     |    |
 ____|    |
|####|####|
|    |    |
|    |    |
|    |    |____
|####|####|####|
|    |    |    |
|    |    |    |
|    |    |    |
|    |    |    |
|    |    |    |
|    |    |    |
|    |    |    |
================


In order to pass most of the test cases, the building must match the above exactly, including spaces. There should be no spaces after the last character in the line. There are a couple of test cases that you can pass even if the spaces are wrong, as long as the other characters are correct, but for most test cases the spaces must also match exactly.

Original Art
If the user chooses to display original art, a creation of your own design should be displayed. Your art should be very different from the tower in the previous step. If you want inspiration for your design, Google ASCII art. It should not require any input, so it can be evaluated more quickly when grading (if you'd like to make it depend on size, you can add input and then comment it out when you submit the program, making sure the size gets set to a value that works well).

Your original art must use at least one loop, and it must be between 5 and 80 lines of output, with a maximum width of 100 characters per line, including whitespace (spaces, tabs, etc).

To help with grading, copy and paste your finished art into the comments at the top of your program. Here is an example of my original art, although your original graphic should be different than the example given.

||     ||   ===++===    /=====\
||     ||      ||      //     \\
||     ||      ||      ||
||     ||      ||      ||
\\     //      ||      \\     //
 \=====/    ===++===    \=====/


Formatting
Your program should be properly formatted, as described in this document. Content related to documenting functions and classes may be ignored, although you are welcome to use functions if you'd like (but they are not required).

Some Important C++ You'll Use
You can use setw and setfill to add spaces or other characters. setw creates a "width" for the text being displayed. So calling setw with 5, and then outputting "hi" will add 3 spaces before "hi" (so that there's a total of 5 being displayed).

cout << setw(5) << "hi" << endl;


If you have two pieces of text you want to use setw for, you need to call it before each output (after a piece of output, setw gets undone). For example: "hi" and "bye" will have widths of 5, but "yes" doesn't have any spaces added:

cout << setw(5) << "hi" << "yes" << setw(5) << "bye" << endl;


setfill can be used to change how setw behaves. Normally, setw will add spaces to get to the appropriate width, but you can call setfill to choose a different character. Notice that the period is in single quotes to tell C++ that it's a character (one letter/symbol) instead of a string (0 or more characters) which use double quotes.

cout << setfill('.') << setw(5) << "hi" << setw(5) << "bye" << endl;


That will display three periods instead of spaces, and then the word hi. Unlike setw, setfill persists--it will keep using periods until we tell it to use spaces again--so the word bye has two periods before it. This can be helpful for repeating a character, for example 10 dollar signs:

cout << setfill('$') << setw(10) << "$" << endl;


Lastly, you'll need to use loops to complete the project. Here is an example of a while loop to display the numbers 1 to 10:

int counter = 1;
while (counter <= 10) {
    cout << counter << endl;
    counter++;  // Adds one to the counter variable
}
Advice On Getting Started
After getting input for the size, I think it's easiest to start by creating the bottom of the tower since it is left-aligned (there are no spaces at the beginning). Start by ignoring the ground, roof, and utility floor. For example, with size 2:

|  |  |  |
|  |  |  |
|  |  |  |
|  |  |  |


Ideally, you can do that using a loop that has 1-3 lines inside it to produce the output. 

Now let's add the utility floor: take the 1-3 lines of output, and copy/paste them to just before the loop. That should create another line of output, and we want to modify that so it now uses # instead of spaces. Have the loop repeat one fewer time so that we still have the same total number of lines of output:

|##|##|##|
|  |  |  |
|  |  |  |
|  |  |  |
Now, create the middle of the tower. You can likely take the same code for creating the bottom, and modify it slightly so it only prints two towers, and only does size lines total (2 in this case, rather than 4 like the bottom section):

|##|##|
|  |  |
|##|##|##|
|  |  |  |
|  |  |  |
|  |  |  |


Lastly, we need to modify the bottom line of the middle tower, so that it creates a roof for the right section:

|##|##|
|  |  |__
|##|##|##|
|  |  |  |
|  |  |  |
|  |  |  |


You can repeat this general process for the top section of the tower, and then add a ground as well.