Overview
For this project, we'll be using data from recent US presidential elections, with results for each county. (For those not from the US, every state is divided into counties for a level of government between the state and the individual cities--in almost every state, all land is part of a county. For example, Chicago and many close suburbs are in Cook County.) The example data given to you is real, from the MIT election lab (https://electionlab.mit.edu/data), although your project will need to work with other candidates and parties, as described in the project, so that it works for future elections as well. 

You must use classes in this project. You must use a Votes class in this project to keep track of the each set of results. The Votes class should keep track of only one set of votes (so, the votes for one candidate in one county), so the main function or another class should have a vector of Vote to be able to keep track of the full set of results.



Data
A few sample files are provided for you, and your program should work with any valid file, including files with different candidates and different parties. Each set of data is on a separate line in the file, with the following information, separated by commas:

State
County
Candidate
Party
Number of Votes
For example:

ILLINOIS,COOK,BARACK OBAMA,DEMOCRAT,1488537

This is from the 2012 election, and tells us that President Obama received 1,488,537 votes in Cook County. His opponents' votes are listed on separate lines in the file (for that election just Mitt Romney, the Republican candidate, is listed individually, and then there is information for "Other" which combines all others receiving votes).

A few sample files are provided for you. Note that you cannot assume the number of candidates--in 2020, for example, the libertarian candidate Jo Jorgensen received enough votes to be included separately, and the autograder will use other test files with more candidates.



Grading
Note that several of the outputs produce tables, which have very specific number of spaces specified, to line them up. In each case ,some test cases will require whitespace to match exactly and some will give credit even if the whitespace doesn't match (so you will still get partial credit, even if your whitespace does not match exactly). These test cases should be clear from the name. For any test cases with whitespace required, it will only be looking for the exact table itself (so spaces around the menu, etc, will not impact your grade). The Full Program tests will not require whitespace to match exactly.

Your Program
The program should first prompt the user to enter the datafile to use, and then show the user a menu:

Enter file to use: votes-2012.txt

Select a menu option:
  1. Data overview
  2. National results
  3. State results
  4. Candidate results
  5. County search
  6. Exit
Your choice:


The program should exit if the user chooses 6. Otherwise, the program should perform the appropriate task, and then return to the main menu. Each menu item is described below, along with example outputs. If the user enters a number other than 1-6, just return to the main menu to get a new input.



Data Overview
This option should show the number of election records (essentially the number of lines of information that have been read in from the file), and the total number of votes in those records.

Your choice: 1
Number of election records: 9468
Total number of votes recorded: 129048916
National Results
This option should list each candidate, their party, and the number of votes received. The candidates should be sorted so that the candidate receiving the most votes is listed first. 

To receive full credit, the spacing in this table must match exactly. The first column (candidate name) should be 20 characters wide and left-aligned, the party must be 15 characters wide and left-aligned, and the votes should be 10 characters wide and right-aligned. I recommend using setw to help with this. 

Your choice: 2
BARACK OBAMA        DEMOCRAT         65753019
MITT ROMNEY         REPUBLICAN       60666387
OTHER               OTHER             2629510


You can also use left and right (cout << left or cout << right) to specify which way the text is aligned. The section "Getting Started" gives some suggestions for keeping track of each candidate's votes, and sorting them.

State Results
This option asks the user for a state, then displays the candidates and graphical bars to represent their votes (we'll use the pipes like in an 'or'). You should display one pipe for each 150,000 votes, rounding to the closest number (so 80,000 votes would round up to 1 pipe shown). The candidates should be sorted so that the candidate receiving the most votes is listed first. The state input should be case insensitive (and remember that state names may have more than one word).



Your choice: 3
Enter state: Illinois
BARACK OBAMA        ||||||||||||||||||||
MITT ROMNEY         ||||||||||||||
OTHER               |


Your choice: 3
Enter state: South Carolina
MITT ROMNEY         |||||||
BARACK OBAMA        ||||||
OTHER


Candidate Results
With candidate results, the program should ask the user for a candidate. Using the user's input, it should then search for a name that contains that text (case insensitive). So when searching for "Obama" for example, it will notice that the candidate in the file "BARACK OBAMA" is a match, and then display the information for each state about Obama. For each state, list the name of the state, the number of votes for the chosen candidate, the total number of votes, and the percentage of votes that candidate received. At the end, list that candidate's best state (the state where they received the highest percentage of votes).

There is a constant in the template, STATES, which is an array of state names in alphabetical order (the order they should be displayed in the results here), and a constant NUM_STATES with the number of states in the array. In this program Washington DC is treated like a state (since its votes are counted similarly to a state), so the number of states is actually 51.

States should be output left aligned with a width of 20 characters. Both vote totals should be displayed right-aligned with a width of 10 characters. The percentage should be shown with one decimal place, right aligned with a width of 7 characters. The % should go after the number (so it would be 8 characters wide if you include the % when counting characters).

Your program only needs to work correctly with one candidate who matches the text. (We will not test this option with a name that matches more than one candidate--for example "Jo" would match both "JOSEPH R BIDEN JR" and "JO JORGENSEN" so we won't use that as input.)



Your choice: 4
Enter candidate: Obama
ALABAMA                 795696   2070353   38.4%
ALASKA                  122640    300495   40.8%
ARIZONA                1025232   2299254   44.6%
ARKANSAS                394409   1069468   36.9%
CALIFORNIA             7854285  13038547   60.2%
COLORADO               1322998   2569217   51.5%
CONNECTICUT             907422   1562190   58.1%
DELAWARE                242584    413937   58.6%
FLORIDA                4237756   8474179   50.0%
GEORGIA                1773827   3900050   45.5%
HAWAII                  306266    434221   70.5%
IDAHO                   212787    652274   32.6%
ILLINOIS               3019512   5241891   57.6%
INDIANA                1152887   2624534   43.9%
IOWA                    822544   1582180   52.0%
KANSAS                  439908   1156254   38.0%
KENTUCKY                679370   1797212   37.8%
LOUISIANA               809141   1994065   40.6%
MAINE                   399235    710126   56.2%
MARYLAND               1677844   2707327   62.0%
MASSACHUSETTS          1921290   3167767   60.7%
MICHIGAN               2564569   4730961   54.2%
MINNESOTA              1546167   2936561   52.7%
MISSISSIPPI             562949   1285584   43.8%
MISSOURI               1223796   2757312   44.4%
MONTANA                 201839    483932   41.7%
NEBRASKA                302081    794379   38.0%
NEVADA                  531373   1014918   52.4%
NEW HAMPSHIRE           369561    710931   52.0%
NEW JERSEY             2125101   3640292   58.4%
NEW MEXICO              415335    783758   53.0%
NEW YORK               4324228   7061925   61.2%
NORTH CAROLINA         2178391   4505372   48.4%
NORTH DAKOTA            124966    322932   38.7%
OHIO                   2827621   5580822   50.7%
OKLAHOMA                443547   1334872   33.2%
OREGON                  970488   1789270   54.2%
PENNSYLVANIA           2990274   5742040   52.1%
RHODE ISLAND            279409    445719   62.7%
SOUTH CAROLINA          865941   1964118   44.1%
SOUTH DAKOTA            145039    363815   39.9%
TENNESSEE               960709   2458577   39.1%
TEXAS                  3308124   7993851   41.4%
UTAH                    251813   1017440   24.7%
VERMONT                 199239    299290   66.6%
VIRGINIA               1971820   3854489   51.2%
WASHINGTON             1755396   3125516   56.2%
WASHINGTON DC           267070    293764   90.9%
WEST VIRGINIA           238269    670440   35.5%
WISCONSIN              1620985   3071434   52.8%
WYOMING                  69286    249061   27.8%
The best state for BARACK OBAMA is WASHINGTON DC


County Search
The final option gives the user a chance to search for election results by county name. The program should allow the user to enter a county name (possibly more than one word). All results should be shown with a county that matches that name (in the order they are listed in the file).

The county name and state should be shown together with a comma (like COOK, ILLINOIS) in one left-aligned column that is 40 characters wide. Next is the candidate, left-aligned and 20 characters wide. Finally, show the number of votes right-aligned in a column that is 10 characters wide.

Your choice: 5
Enter county: Cook
COOK, ILLINOIS                          BARACK OBAMA           1488537
COOKE, TEXAS                            OTHER                      154
COOK, MINNESOTA                         OTHER                      108
COOK, MINNESOTA                         MITT ROMNEY               1221
COOK, GEORGIA                           OTHER                       54
MCCOOK, SOUTH DAKOTA                    BARACK OBAMA               905
COOK, GEORGIA                           MITT ROMNEY               3935
MCCOOK, SOUTH DAKOTA                    OTHER                       53
COOK, ILLINOIS                          OTHER                    27518
COOKE, TEXAS                            MITT ROMNEY              11951
COOK, ILLINOIS                          MITT ROMNEY             495542
COOK, MINNESOTA                         BARACK OBAMA              1993
COOKE, TEXAS                            BARACK OBAMA              2246
MCCOOK, SOUTH DAKOTA                    MITT ROMNEY               1655
COOK, GEORGIA                           BARACK OBAMA              2042


Advice for Getting Started
The project relies on reading data in from the file and storing it to analyze later, so the first place to start is to work on loading the data and creating a Votes class. Then, read the data in from a file and create a Votes object, and add it to a vector to remember it for later. 

Breaking that down into small steps is valuable: create a file with just one piece of election data and read it in and print out the data to make sure you've read it correctly. Then create a Votes object with that data or add a second vote's information to the file and put the code into a loop.

File input errors can be tricky to debug if you don't know where in the file the error happened. (It's very common that problems show up when reading in the first or second line from the file, but errors could also be caused by something unique about the 18th line that caused a problem. Or potentially an error that happened at the end of the file.) You can output the name of the candidate and county each time you read it in to help you figure out what vote data the program was working with when the error occurred (sometimes it'll be that line in the file, and sometimes the line right after that which caused the error but the names haven't been displayed yet). Once your file input is working well, you can delete or comment out the debug output.

Once you have a vector of vote information, you can break up each menu item into a separate function and pass the vector to that function, to perform counts or search for counties, etc.

Input from a File
As a reminder from the last project, you can use create an ifstream object to get input from a file. You'll need to #include <fstream> to do this. Once you do that, your ifstream object works just like cin, but it reads input from the file rather than the keyboard. For example:

ifstream fileIn;
fileIn.open("myfile.txt");
fileIn >> myString;
This reads the first word in myfile.txt and stores it in myString.

Helpful Functions for getting input: getline, stoi, eof
Typically, getline reads in the rest of a line of input, but we can instead give it a third parameter, to tell it what character to stop at (rather than stopping at the newline). For example, when reading the file, it can also be useful to read input until there is a comma: getline(fileIn, countyName, ',');

Think carefully about the last input on each line, because that will not have a comma following it.

The function stoi converts a string to an integer (the name is short for "string to integer"). For example:
string numStr = "5";
int num = stoi(numStr);

will result in num being set to 5. stoi will throw an exception if the string isn't a number.

The function eof can tell you if you're at the end of a file. If you have an ifstream called fileIn, then fileIn.eof() will return true if you've reached the end of the file, and will return false otherwise. If you create a file of your own to test your code, be careful about blank lines at the end: eof() will return false (because there's still a blank line that hasn't been read in), but your code will likely have an error when it tries to read in that blank line. We have been careful to have no blank lines at the end of files we're providing or using to test your code.

Creating a List of Candidates
To create a list of candidates, you can create a vector of strings (to remember the name of the candidate). Then go through the list of vote records: for each Votes object, check to see if the candidate is already in the vector of strings. If it is, you don't need to do anything; if it's not you should add it to the end. Once you've done that with each Votes object, you'll have a list of all the candidates in the file. You can then work with one candidate at a time and do any calculations you want. For example, if the current candidate is Barack Obama, go through the entire list of votes and, if you see one with Obama as the candidate, add it to the vote totals.

Sorting the List of Candidates
Since we want to display the candidates in order from the most votes to the least, we'll need to sort the list in some way. You may write your own sort, but you can also use the sort function that is in #include<algorithm>. The sort function can work with a vector, and sorts the objects using the < operator to determine which object goes first. So, if you create a Candidate class that keeps track of the name, party, and number of votes that candidate has, you can write a < operator to determine whether one candidate should get displayed before another. To use the sort function, you call it with the beginning and end of the list (to tell it to sort the whole thing). If candidates is our vector, we could call:

sort(candidates.begin(), candidates.end());


Formatting
Your code should be properly formatted, as described in this document. For this assignment, that will include using functions and classes appropriately.